"""
Project file for PhASAR static analysis framework.
"""
import typing as tp
from pathlib import Path

from benchbuild.settings import CFG
from benchbuild.utils.compiler import cc, cxx
from benchbuild.utils.run import run
from benchbuild.project import Project
from benchbuild.utils.cmd import make, cmake, cp, git
from benchbuild.utils.download import with_git
import benchbuild.project as prj

from plumbum import local, path

from varats.paper.paper_config import project_filter_generator
from varats.utils.project_util import wrap_paths_to_binaries


@with_git(
    "https://github.com/secure-software-engineering/phasar.git",
    limit=200,
    refspec="HEAD",
    shallow_clone=False,
    version_filter=project_filter_generator("phasar"))
class Phasar(Project):  # type: ignore
    """ PhASAR an LLVM-based static analysis framework (fetched by Git) """

    NAME = 'phasar'
    GROUP = 'cpp_projects'
    DOMAIN = 'analysis-framework'
    VERSION = 'HEAD'

    SRC_FILE = NAME + "-{0}".format(VERSION)

    @property
    def binaries(self) -> tp.List[Path]:
        """Return a list of binaries generated by the project."""
        return wrap_paths_to_binaries([
            'tools/phasar/phasar'
        ])

    def run_tests(self, runner: run) -> None:
        pass

    def compile(self) -> None:
        self.download()
        with local.cwd(self.SRC_FILE):
            git("submodule", "init")
            git("submodule", "update")
            path.local.LocalPath.mkdir(local.path("build/"))
            clang = cc(self)
            clangxx = cxx(self)
            with local.cwd("build/"):
                with local.env(CC=str(clang), CXX=str(clangxx)):
                    cmake("-G", "Unix Makefiles", "..")
                run(make["-j", int(CFG["jobs"])])
                for binary in self.binaries:
                    if not Path("{binary}".format(binary=binary)).exists():
                        print("Shit is fucked up ", binary)
